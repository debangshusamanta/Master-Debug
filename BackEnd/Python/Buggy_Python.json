[
  {
    "id": 1,
    "code": "names = ['Alice', 'Bob'  'Charlie']\nfor name in names:\n    print(name,upper())",
    "output": "ALICE\nBOB\nCHARLIE",
    "correct_output": "ALICE\nBOB\nCHARLIE",
    "hint": "Check for bugs at: Line 1, 3"
  },
  {
    "id": 2,
    "code": "x = 10\ny = 3\nprint('Quotient:', x // y)\nprint('Remainder:'  x % y)",
    "output": "Quotient: 3\nRemainder: 1",
    "correct_output": "Quotient: 3\nRemainder: 1",
    "hint": "Check for bugs at: Line 4"
  },
  {
    "id": 3,
    "code": "students = ['A', 'B', 'C']\nscores = [90. 85, 78]\nfor i in range(len(students)):\n    print(f\"Student {students[I]} scored {scores[i]}\")",
    "output": "Student A scored 90\nStudent B scored 85\nStudent C scored 78",
    "correct_output": "Student A scored 90\nStudent B scored 85\nStudent C scored 78",
    "hint": "Check for bugs at: Line 2, 4"
  },
  {
    "id": 4,
    "code": "Words = [\"apple\", \"banana\", \"avocado\", \"grape\"]\nfor w in words:\n    if w.startswith('a');\n        print(w)",
    "output": "apple\navocado",
    "correct_output": "apple\navocado",
    "hint": "Check for bugs at: Line 2, 3"
  },
  {
    "id": 5,
    "code": "arr = [1, 2, 3, 4, 5]\ntotal = 0\nfor num in arr\n    total += num\nprint(total)",
    "output": "15",
    "correct_output": "15",
    "hint": "Check for bugs at: Line 3"
  },
  {
    "id": 6,
    "code": "s = 'Python'\nrev = ''\nfor c in s:\n    rev = c + rev\nprint(Rev)",
    "output": "nohtyP",
    "correct_output": "nohtyP",
    "hint": "Check for bugs at: Line 5"
  },
  {
    "id": 7,
    "code": "nums = [2, 4. 6, 8]\nprod = 1\nfor n in nums:\n    prod *= n\nprint(prod)",
    "output": "384",
    "correct_output": "384",
    "hint": "Check for bugs at: Line 1"
  },
  {
    "id": 8,
    "code": "arr = [1, 3, 5, 7, 9]\nsquares = []\nfor I in arr;\n    squares.append(i * i)\nprint(squares)",
    "output": "[1, 9, 25, 49, 81]",
    "correct_output": "[1, 9, 25, 49, 81]",
    "hint": "Check for bugs at: Line 3"
  },
  {
    "id": 9,
    "code": "arr = [1, 2, 3, 4, 5]\nrev = []\nfor i in range(len(arr)-1, -1, -1):\n    rev.append(arr[I])\nprint(rev)",
    "output": "[5, 4, 3, 2, 1]",
    "correct_output": "[5, 4, 3, 2, 1]",
    "hint": "Check for bugs at: Line 4"
  },
  {
    "id": 10,
    "code": "nums = list(range(1, 11))\nprint(\"Numbers divisible by 3:\")\nfor n in nums:\n    if n % 3 = 0\n        print(n)",
    "output": "Numbers divisible by 3:\n3\n6\n9",
    "correct_output": "Numbers divisible by 3:\n3\n6\n9",
    "hint": "Check for bugs at: Line 4"
  },
  {
    "id": 11,
    "code": "data = [2, 3, 5, 7, 11]\nsum_sq = 0\nfor num in data:\n    sum_sq += num ** 2\nprint(\"Sum of squares:\", sum-sq)",
    "output": "Sum of squares: 208",
    "correct_output": "Sum of squares: 208",
    "hint": "Check for bugs at: Line 5"
  },
  {
    "id": 12,
    "code": "Total = 0\nfor i in range(1  11):\n    if i % 2 == 0:\n        total += i\nprint(Total)",
    "output": "30",
    "correct_output": "30",
    "hint": "Check for bugs at: Line 2, 4"
  },
  {
    "id": 13,
    "code": "words = ['hello', 'world', 'python']\ncapitalized = []\nfor word In words\n    capitalized.append(word.capitalize())\nPrint(capitalized)",
    "output": "['Hello', 'World', 'Python']",
    "correct_output": "['Hello', 'World', 'Python']",
    "hint": "Check for bugs at: Line 3, 5"
  },
  {
    "id": 14,
    "code": "matrix = [[1,2,3],[4,5,6],[7,8,9]]\nsum_diag = 0\nfor i in range(len(matrix):\n    sum_diag += matrix[i][i]\nprint(\"Sum of diagonal:\",, sum_diag)",
    "output": "Sum of diagonal: 15",
    "correct_output": "Sum of diagonal: 15",
    "hint": "Check for bugs at: Line 3, 5"
  },
  {
    "id": 15,
    "code": "nums = [2, 4, 6, 8, 10]\nindex_sum : 0\nfor i in range(len(nums)):\n    index_sum += i * nums[i]\nprit(index_sum)",
    "output": "80",
    "correct_output": "80",
    "hint": "Check for bugs at: Line 2, 5"
  },
  {
    "id": 16,
    "code": "name = 'Sayan'\nage = 22\nif age >= 18:\n    print(f\"{name} is an adult\")\nelse\n    print(f\"{name} is a minor\")",
    "output": "Sayan is an adult",
    "correct_output": "Sayan is an adult",
    "hint": "Check for bugs at: Line 5"
  },
  {
    "id": 17,
    "code": "nums = [10, 20, 5, 8, 30]\nmax_val = nums[0]\nfor n in nums:\n    if n > max_val;\n        max_val = n\nprint(max_val)",
    "output": "30",
    "correct_output": "30",
    "hint": "Check for bugs at: Line 4"
  },
  {
    "id": 18,
    "code": "arr = [3, 5, 7  9]\ncount = 0\nfor num in arr:\n    If num % 2 != 0:\n        count += 1\nprint(count)",
    "output": "4",
    "correct_output": "4",
    "hint": "Check for bugs at: Line 1, 4"
  },
  {
    "id": 19,
    "code": "temp = [30, 35, 28, 40]\nfor t in temp:\n    If t > 32:\n        print('Hot')\n    Else:\n        print('Cool')",
    "output": "Cool\nHot\nCool\nHot",
    "correct_output": "Cool\nHot\nCool\nHot",
    "hint": "Check for bugs at: Line 3, 5"
  },
  {
    "id": 20,
    "code": "nums = [12, 15, 22, 29, 31]\ncount = 0:\nfor N in nums:\n    if n % 3 == 0:\n        count += 1\nprint(count)",
    "output": "2",
    "correct_output": "2",
    "hint": "Check for bugs at: Line 2, 4"
  },
  {
    "id": 21,
    "code": "arr = [8  4  7  1]\nminimum = arr[0]\nfor val in arr:\n    if val < minimum:\n        minimum = val,\nprint(\"Min value:\", minimum)",
    "output": "Min value: 1",
    "correct_output": "Min value: 1",
    "hint": "Check for bugs at: Line 1, 5"
  },
  {
    "id": 22,
    "code": "def check_even_odd(n):\n    if n % 2 == 0:\n        Return 'Even'\n    else:\n        Return 'Odd'\n\nprint(check_even_odd(7))",
    "output": "Odd",
    "correct_output": "Odd",
    "hint": "Check for bugs at: Line 3, 5"
  },
  {
    "id": 23,
    "code": "def factorial(n):\n    result = 1\n    for i in range(1  n+1):\n        result *= i:\n    return result\n\nprint(factorial(5))",
    "output": "120",
    "correct_output": "120",
    "hint": "Check for bugs at: Line 3, 4"
  },
  {
    "id": 24,
    "code": "arr = [5, 10, 15, 20, 25]\nfound : False\nfor num in arr:\n    if num = 15:\n        found = True\n        break\nprint(found)",
    "output": "True",
    "correct_output": "True",
    "hint": "Check for bugs at: Line 2, 4"
  },
  {
    "id": 25,
    "code": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n);\n        a, b = b, a + b\n    Return a\n\nprint(fibonacci(7))",
    "output": "13",
    "correct_output": "13",
    "hint": "Check for bugs at: Line 3, 5"
  },
  {
    "id": 26,
    "code": "def cube_list(arr):\n    Result = []\n    for x in arr:\n        result,append(x ** 3)\n    return result\n\nprint(cube_list([1, 2, 3, 4]))",
    "output": "[1, 8, 27, 64]",
    "correct_output": "[1, 8, 27, 64]",
    "hint": "Check for bugs at: Line 4, 5"
  },
  {
    "id": 27,
    "code": "def custom_len(s):\n    length = 0\n    for _ in s:\n        length += 1:\n    return length\n\nprint(\"Length:\"  custom_len(\"OpenAI\"))",
    "output": "Length: 6",
    "correct_output": "Length: 6",
    "hint": "Check for bugs at: Line 4, 7"
  },
  {
    "id": 28,
    "code": "arr = [5, 4, 3, 2, 1]\nsorted_arr = []\nwhile arr:\n    min_val = min(Arr)\n    sorted_arr.append(min_val)\n    Arr,remove(min_val)\nprint(sorted_arr)",
    "output": "[1, 2, 3, 4, 5]",
    "correct_output": "[1, 2, 3, 4, 5]",
    "hint": "Check for bugs at: Line 4, 6"
  },
  {
    "id": 29,
    "code": "def nested_loop_pattern(n);\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(i*j, end=' ')\n        print():\n\nnested_loop_pattern(5)",
    "output": "1 \n2 4 \n3 6 9 \n4 8 12 16 \n5 10 15 20 25",
    "correct_output": "1 \n2 4 \n3 6 9 \n4 8 12 16 \n5 10 15 20 25",
    "hint": "Check for bugs at: Line 1, 5"
  },
  {
    "id": 30,
    "code": "string = \"banana\"\nchar_count = {}\nfor Char in string:\n    if char in char-count:\n        char_count[char] += 1\n    else:\n        char_count[char] = 1\nprint(char_count)",
    "output": "{'b': 1, 'a': 3, 'n': 2}",
    "correct_output": "{'b': 1, 'a': 3, 'n': 2}",
    "hint": "Check for bugs at: Line 3, 4"
  },
  {
    "id": 31,
    "code": "nums = [1, 2, 3, 4, 5]:\neven_sum = 0\nodd_sum = 0\nfor num in nums:\n    if Num % 2 == 0;\n        even_sum += num\n    else:\n        odd_sum += num\nprint(even_sum - odd_sum)",
    "output": "-3",
    "correct_output": "-3",
    "hint": "Check for bugs at: Line 1, 5"
  },
  {
    "id": 32,
    "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            Return False\n    return True\n\nprint(is_prime(11)",
    "output": "True",
    "correct_output": "True",
    "hint": "Check for bugs at: Line 6, 9"
  },
  {
    "id": 33,
    "code": "text = \"python is amazing\"\ncounts = {}\nfor char in text:\n    if char != ' ':\n        If char in counts:\n            counts[char] += 1\n        else:\n            count[Char] = 1\nprint(counts)",
    "output": "{'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 2, 'i': 2, 's': 2, 'a': 2, 'm': 1, 'z': 1, 'g': 1}",
    "correct_output": "{'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 2, 'i': 2, 's': 2, 'a': 2, 'm': 1, 'z': 1, 'g': 1}",
    "hint": "Check for bugs at: Line 5, 8"
  },
  {
    "id": 34,
    "code": "def convert_temperatures(celsius_list):\n    fahrenheit_list : []\n    for c in celsius_list\n        f = (c * 9/5) + 32\n        fahrenheit_list.append(round(f, 2))\n    Return fahrenheit-list\n\ntemps = [-10, 0, 20, 30, 37]\nprint(\"Converted temps:\", convert_temperatures(temps))",
    "output": "Converted temps: [14.0, 32.0, 68.0, 86.0, 98.6]",
    "correct_output": "Converted temps: [14.0, 32.0, 68.0, 86.0, 98.6]",
    "hint": "Check for bugs at: Line 2, 3, 6"
  },
  {
    "id": 35,
    "code": "def check_substring_occurrences(s, sub):\n    count = 0\n    for i in range(len(s) - len(sub) + 1):\n        if s[i;i+len(sub)] == sub\n            count += 1\n    prit(f\"'{sub}' found {count} times in the string.\")\n\ns = \"abcabcabcabc\"\ncheck_substring_occurrences(S, \"abc\")",
    "output": "'abc' found 4 times in the string.",
    "correct_output": "'abc' found 4 times in the string.",
    "hint": "Check for bugs at: Line 4, 6, 9"
  },
  {
    "id": 36,
    "code": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_sentence = ''\n    For word in reversed(words)\n        reversed_sentence += word + ' '\n    return reversed_sentence.strip()\n\ns : \"Python is fun to learn\"\nresult = reverse_words(s);\nprint(result)",
    "output": "learn to fun is Python",
    "correct_output": "learn to fun is Python",
    "hint": "Check for bugs at: Line 4, 8, 9"
  },
  {
    "id": 37,
    "code": "def count_vowels(s);\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if Char in vowels:\n            count += 1:\n    return count\n\nstring = \"Programming is creative and logical.\"\nprint(\"Vowel Count:\", count_vowels(string))",
    "output": "Vowel Count: 13",
    "correct_output": "Vowel Count: 13",
    "hint": "Check for bugs at: Line 1, 5, 6"
  },
  {
    "id": 38,
    "code": "nums = [1, 2, 3, 4, 5, 6]\ndef remove_even(lst):\n    result = []:\n    For num in lst:\n        if num % 2 != 0:\n            result.append(num)\n    return Result\n\nfiltered : remove_even(nums)\nprint(filtered)",
    "output": "[1, 3, 5]",
    "correct_output": "[1, 3, 5]",
    "hint": "Check for bugs at: Line 3, 4, 9"
  },
  {
    "id": 39,
    "code": "grades = [90, 85, 70, 60, 95]\navg : sum(grades) / len(grades)\nif avg >= 90:\n    Print('A')\nelif avg >= 80:\n    Print('B')\nelif avg >= 70:\n    Print('C')\nelse:\n    Print('F')",
    "output": "C",
    "correct_output": "C",
    "hint": "Check for bugs at: Line 2, 4, 6, 8, 10"
  },
  {
    "id": 40,
    "code": "def find_pairs_with_sum(arr, target):\n    found = []\n    for i In range(len(arr)):\n        for j In range(i+1  len(arr)):\n            if arr[i] + arr[j] == target:\n                found,append((arr[i], arr[j])):\n    return found\n\narr = [2, 4, 3, 5, 7, 8, 1]\ntarget : 9\nprint(\"Pairs summing to 9:\", find_pairs_with_sum(arr, target))",
    "output": "Pairs summing to 9: [(2, 7), (4, 5), (3, 6), (8, 1)]",
    "correct_output": "Pairs summing to 9: [(2, 7), (4, 5), (8, 1)]",
    "hint": "Check for bugs at: Line 3, 4, 6, 10"
  },
  {
    "id": 41,
    "code": "matrix = [[1  2], [3, 4]  [5, 6]]\nrows = len(matrix)\ncols = len(matrix[0])\ntransposed = []\nfor c in range(cols)\n    new_row = []\n    for r in range(rows):\n        new_row.append(matrix[r][c])\n    transposed.append(new_row)\n\nfor Row in transposed:\n    print(row)",
    "output": "[1, 3, 5]\n[2, 4, 6]",
    "correct_output": "[1, 3, 5]\n[2, 4, 6]",
    "hint": "Check for bugs at: Line 1, 5, 11"
  },
  {
    "id": 42,
    "code": "def is_palindrome(word):\n    left = 0:\n    right = len(word) - 1\n    While left < right:\n        if word[left] != word[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\nprit(is_palindrome(\"level\"))\nprint(is_palindrome(\"hello\"))",
    "output": "True\nFalse",
    "correct_output": "True\nFalse",
    "hint": "Check for bugs at: Line 2, 4, 11"
  },
  {
    "id": 43,
    "code": "def sum_column(matrix, col):\n    total = 0\n    For row In matrix\n        total += row[col]\n    return total\n\nmatrix = [\n    [2, 4, 6],\n    [1, 3, 5].\n    [7, 8, 9]\n]\nprint(\"Sum of column 1:\"  sum_column(matrix, 1))",
    "output": "Sum of column 1: 15",
    "correct_output": "Sum of column 1: 15",
    "hint": "Check for bugs at: Line 3, 9, 12"
  },
  {
    "id": 44,
    "code": "marks : [65, 70, 85, 90, 40]\ndef categorize(m):\n    if m >= 85:\n        return 'Excellent'\n    elif m >= 70:\n        return 'Good'\n    elif m >= 50:\n        return 'Average'\n    else\n        return 'Fail'\n\nfor mark In marks:\n    print(f\"Marks: {mark}, Category: {categorize(mark)}\")",
    "output": "Marks: 65, Category: Average\nMarks: 70, Category: Good\nMarks: 85, Category: Excellent\nMarks: 90, Category: Excellent\nMarks: 40, Category: Fail",
    "correct_output": "Marks: 65, Category: Average\nMarks: 70, Category: Good\nMarks: 85, Category: Excellent\nMarks: 90, Category: Excellent\nMarks: 40, Category: Fail",
    "hint": "Check for bugs at: Line 1, 9, 12"
  },
  {
    "id": 45,
    "code": "def count_frequency(arr):\n    freq = {}\n    for val in arr:\n        if val in freq\n            freq[val] += 1\n        else:\n            freq[val] = 1\n\n    for K in sorted(freq):\n        print(f\"{k}: {freq[k]}\")\n\narr = [5, 3, 6, 3, 5, 3, 7, 8, 5, 6, 7, 9, 5]\ncount_frequency(Arr)",
    "output": "3: 3\n5: 4\n6: 2\n7: 2\n8: 1\n9: 1",
    "correct_output": "3: 3\n5: 4\n6: 2\n7: 2\n8: 1\n9: 1",
    "hint": "Check for bugs at: Line 4, 9, 13"
  },
  {
    "id": 46,
    "code": "def matrix_sum(matrix):\n    total = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            total += matrix[i][J]\n    return total\n\ndata = [\n    [1, 2, 3  4],\n    [5, 6, 7, 8]\n    [9, 10, 11, 12]\n]\nprint(\"Matrix Sum:\", matrix_sum(data))",
    "output": "Matrix Sum: 78",
    "correct_output": "Matrix Sum: 78",
    "hint": "Check for bugs at: Line 5, 9, 10"
  },
  {
    "id": 47,
    "code": "def prime_factors(n):\n    factors = []\n    i = 2\n    While i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else;\n            i += 1\n    return factors\n\nnum = 84\nResult = prime_factors(num)\nprint(\"Prime factors of\", num, \"are:\", result)",
    "output": "Prime factors of 84 are: [2, 2, 3, 7]",
    "correct_output": "Prime factors of 84 are: [2, 2, 3, 7]",
    "hint": "Check for bugs at: Line 4, 8, 14"
  },
  {
    "id": 48,
    "code": "arr = [3, 7, 2, 9, 1, 6]\neven = []\nodd = []\nfor i in arr;\n    if i % 2 == 0:\n        even,append(i)\n    else:\n        odd.append(i)\n\nprint(\"Even numbers:\")\nfor e in even:\n    print(E)\n\nPrint(\"Odd numbers:\")\nfor o in odd:\n    print(o)",
    "output": "Even numbers:\n2\n6\nOdd numbers:\n3\n7\n9\n1",
    "correct_output": "Even numbers:\n2\n6\nOdd numbers:\n3\n7\n9\n1",
    "hint": "Check for bugs at: Line 4, 6, 12, 14"
  },
  {
    "id": 49,
    "code": "def separate_types(lst):\n    ints = []\n    strs = []\n    floats = []\n    for x in lst:\n        If isinstance(x, int):\n            ints.append(x)\n        elif isinstance(x, float):\n            floats,append(x)\n        elif isinstance(x, str):\n            strs.append(x)\n    print(\"Integers:\", int)\n    print(\"Floats:\", floats)\n    print(\"Strings:\", strs)\n\ndata = [1, 2.0  'a', 3, 4.5, 'b', 5]\nseparate_types(data)",
    "output": "Integers: [1, 3, 5]\nFloats: [2.0, 4.5]\nStrings: ['a', 'b']",
    "correct_output": "Integers: [1, 3, 5]\nFloats: [2.0, 4.5]\nStrings: ['a', 'b']",
    "hint": "Check for bugs at: Line 6, 9, 12, 16"
  },
  {
    "id": 50,
    "code": "def analyze_numbers(nums):\n    even_sum = 0\n    odd_sum = 0\n    max_even = float('-inf')\n    min_odd = float(inf)\n    for n in nums:\n        if n % 2 == 0:\n            even_sum += n\n            if n > max_even:\n                max_even = n\n        else:\n            odd_sum += n\n            if n < min_odd:\n                min_odd = n\n\n    print(\"Even Sum:\"  even_sum)\n    print(\"Odd Sum:\"  odd_sum)\n    print(\"Max Even:\"  max_even)\n    print(\"Min Odd:\"  min_odd)\n\nnums = [12. 7, 4, 9, 18, 3  11, 6, 5, 2]\nanalyze_numbers(nums)",
    "output": "Even Sum: 42\nOdd Sum: 35\nMax Even: 18\nMin Odd: 3",
    "correct_output": "Even Sum: 42\nOdd Sum: 35\nMax Even: 18\nMin Odd: 3",
    "hint": "Check for bugs at: Line 5, 16, 17, 18, 19, 21"
  }
]